# ============================================
# Stage 1: Builder - Compila o V e a aplicação
# ============================================
FROM ubuntu:20.04 AS builder

ENV DEBIAN_FRONTEND=noninteractive

# Instalar dependências de build
RUN apt-get update && apt-get install -y \
    git \
    curl \
    build-essential \
    libssl-dev \
    libpq-dev \
    libsqlite3-dev \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Build do compilador V (cacheable - só recompila se mudar)
WORKDIR /tmp
RUN git clone https://github.com/vlang/v && \
    cd v && \
    make && \
    ./v symlink && \
    v --version

# Copiar apenas arquivos necessários para dependências (cache layer)
WORKDIR /app
COPY v.mod ./

# Instalar dependências do V (cache layer separado)
RUN v install && \
    v install https://github.com/ken0x0a/v-dotenv

# Copiar resto do código
COPY . .

# Compilar aplicação em modo produção
RUN v -g -gc boehm_incr_opt -prod . -o TabuaMareAPI

# ============================================
# Stage 2: Runtime - Apenas executável e deps
# ============================================
FROM ubuntu:20.04

ENV DEBIAN_FRONTEND=noninteractive

# Instalar apenas runtime dependencies (não build tools)
RUN apt-get update && apt-get install -y \
    libssl1.1 \
    libpq5 \
    libsqlite3-0 \
    ca-certificates \
    curl \
    binutils \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copiar apenas o executável compilado do stage builder
COPY --from=builder /app/TabuaMareAPI .

# Copiar arquivos necessários em runtime (se houver)
COPY --from=builder /app/pages ./pages
COPY --from=builder /app/cache ./cache

# Porta padrão
EXPOSE 4048
ENV PORT=4048

# Executar aplicação
CMD ["sh", "-c", "./TabuaMareAPI $PORT"]
